# -*- coding: utf-8 -*-
"""HCF05ML1008 -01 Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11G--KA2ofalgmqlnvIL8BvwYDcw05JDa

Task: Perform analysis on Formula 1 teams with respect to the drivers, laptimes,results and circuits.
"""

#importing the required
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""Pulling out data"""

circuits = pd.read_csv('circuits.csv')
constructors = pd.read_csv('constructors.csv')
drivers = pd.read_csv('drivers.csv')
driverStandings = pd.read_csv('driver_standings.csv')

#1 Getting drivers with most number of points
Standingswithdrivers=pd.merge(driverStandings,drivers);
Standingswithdrivers =Standingswithdrivers[['raceId','driverId','points','wins','forename','surname','nationality']]
Standingswithdrivers['fullname'] = Standingswithdrivers['forename'] + ' ' + Standingswithdrivers['surname']
Top10 = Standingswithdrivers.groupby(['forename', 'surname'])['points'].sum().nlargest(10).reset_index()
Top10

#2 Plotting
sns.barplot(data=Top10, x='points', y= Top10['forename'] + ' ' + Top10['surname'],color="black")

#3 Total points alloted
totalpoints = Standingswithdrivers.groupby('fullname')['points'].sum().sort_values(ascending=False).reset_index().head(11)
totalpoints

#4 Graph for total points alloted
sns.barplot(data=totalpoints, x='points', y= totalpoints['fullname'])

#5 total wins
totalwins=Standingswithdrivers.groupby('fullname')['wins'].sum().sort_values(ascending=False).reset_index().head(11)
totalwins

#6 graph for total wins
sns.lineplot(data=totalwins, x='wins',y='fullname')
plt.figure(figsize=(20, 10))

#7 Grouping by nationality
nationdrivers=Standingswithdrivers.groupby('nationality')['fullname'].count().sort_values(ascending=False).reset_index().head(10)
nationdrivers

#8 Graph for each nation drivers
plt.figure(figsize=(20, 10))
sns.barplot(data=nationdrivers, x='nationality',y='fullname')

#9 TOP 3 finishes
top3 = driverStandings[driverStandings['position'].isin(['1', '2', '3'])]
top3merge = pd.merge(top3,drivers)
count = top3merge.groupby(['forename','surname']).size().reset_index(name="Top3finishes").sort_values(by="Top3finishes",ascending =False).head(11)
count

#10 graph for top 3
sns.lineplot(data=count,x='Top3finishes',y=count['forename']+ ' '+ count['surname'])

#11 Circuits present country wise
circuits['country'].value_counts()

#12 Age of drivers as of 2025
drivers['dob']=pd.to_datetime(drivers['dob'])
drivers['age']=2025-drivers['dob'].dt.year
drivers['age'].value_counts()

#13 circuits based on atlitudes
sns.histplot(circuits['alt'], bins=20)

#14 Top 5 locations with maximum circuits
circuits['location'].value_counts().head()

#15
plt.figure(figsize=(20, 10))
sns.scatterplot( data=circuits,x='lng', y='lat', hue='country', legend=False)

#16 Drivers with zero points
zeropoint = Standingswithdrivers[Standingswithdrivers['points'] == 0]
zeropoint['fullname'].value_counts().head(10)

#17 more than 10 wins
morethan10 = Standingswithdrivers[Standingswithdrivers['wins']>10]
morethan10.groupby('wins')['fullname'].value_counts()

#18 top 10 constructors leading
top_constructors = constructors['name'].value_counts().head(10)
top_constructors

#19 based on nationality
constructornation = constructors['nationality'].value_counts().reset_index()
constructornation

#20 plotting
sns.barplot(data=constructornation,x='count',y='nationality')

#21 win statistics
Standingswithdrivers['wins'].describe()

#22 relation between points nd wnis
plt.figure(figsize=(20,10))
sns.scatterplot(data=Standingswithdrivers, x='points', y='wins')

#23 countries with maximum drivers
drivers['nationality'].value_counts().head(10)

#24 common first names
drivers['forename'].value_counts().head(10)

#25 Mamimum single race wins
Standingswithdrivers.groupby('fullname')['wins'].sum().sort_values(ascending=False).head(1)

#26 maximum points for a nation
Standingswithdrivers[Standingswithdrivers['nationality'] == 'British'].groupby('fullname')['points'].sum().sort_values(ascending=False).head(1)

#27 Maximum wins for a nation
Standingswithdrivers[Standingswithdrivers['nationality'] == 'British'].groupby('fullname')['wins'].sum().sort_values(ascending=False).head(1)

#28 Drivers witn high wins nd high points
combined = pd.merge(totalpoints, totalwins, on='fullname')
combined.sort_values(by=['points', 'wins'], ascending=False).head(10)

#29 describing points
Standingswithdrivers['points'].describe()

#30 Distribution of wins
sns.histplot(Standingswithdrivers['wins'], bins=30, kde=True)

